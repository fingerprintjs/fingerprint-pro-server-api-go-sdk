{{>partial_header}}
package {{packageName}}

import (
    "net/http"
)

// APIClient manages communication with the {{appName}} API v{{version}}
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg    *Configuration

	// API Services
{{#apiInfo}}
{{#apis}}
{{#operations}}

	{{classname}} {{classname}}ServiceInterface
{{/operations}}
{{/apis}}
{{/apiInfo}}
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg

{{#apiInfo}}
	// API Services
{{#apis}}
{{#operations}}
	c.{{classname}} = &{{classname}}Service{cfg: cfg}
{{/operations}}
{{/apis}}
{{/apiInfo}}

	return c
}

// ApiError Provides access to the body, error and model on returned errors.
type ApiError struct {
	body  []byte
	error string
	model interface{}
}

// Error returns non-empty string if there was an error.
func (e ApiError) Error() string {
	return e.error
}

// Body returns the raw bytes of the response
func (e ApiError) Body() []byte {
	return e.body
}

// Model returns the unpacked model of the error
func (e ApiError) Model() interface{} {
	return e.model
}
