
{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
    "context"
    "net/http"
    "strings"
)

const IntegrationInfo = "fingerprint-pro-server-go-sdk/{{packageVersion}}"

type {{classname}}ServiceInterface interface {
{{#operation}}
        /*
    {{{classname}}}Service{{#summary}} {{.}}{{/summary}}{{#notes}}
    {{{notes}}}{{/notes}}
     * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
    {{#allParams}}{{#required}} * @param {{paramName}}{{#description}} {{{.}}}{{/description}}
    {{/required}}{{/allParams}}{{#hasOptionalParams}} * @param opts nil or *{{{classname}}}{{{nickname}}}Opts - Optional Parameters:
    {{#allParams}}{{^required}}     * @param "{{vendorExtensions.x-exportParamName}}" ({{#isPrimitiveType}}{{dataType}}{{/isPrimitiveType}}{{^isPrimitiveType}}Interface of {{dataType}}{{/isPrimitiveType}}) - {{#description}} {{{.}}}{{/description}}
    {{/required}}{{/allParams}}{{/hasOptionalParams}}
    {{#returnType}}@return {{{returnType}}}{{/returnType}}
    */
    {{{nickname}}}(ctx context.Context{{#hasParams}}, {{/hasParams}}{{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}opts *{{{classname}}}{{{nickname}}}Opts{{/hasOptionalParams}}) ({{#returnType}}{{{returnType}}}, {{/returnType}}*http.Response, Error)

{{/operation}}
}

type requestDefinition struct {
    StatusCodeResultsFactoryMap map[int]func() any
    GetPath             func(params ...string) string
}

{{#operation}}
func create{{nickname}}Definition() requestDefinition {
    return requestDefinition{
        GetPath: func(args ...string) string {
            pathParams := []string{ {{#pathParams}}"{{baseName}}",{{/pathParams}} }

            path := "{{{path}}}"

            for i, arg := range args {
                path = strings.Replace(path, "{"+pathParams[i]+"}", arg, -1)
            }

            return path
        },
        StatusCodeResultsFactoryMap: map[int]func() any{
            {{#responses}}{{#dataType}}
            {{code}}: func() any { return &{{{dataType}}}{} },
            {{/dataType}}{{/responses}}
        },
    }
}

{{#hasOptionalParams}}

    type {{{classname}}}{{{nickname}}}Opts struct {
    {{#allParams}}{{^required}}
        {{#isPrimitiveType}}    {{vendorExtensions.x-exportParamName}} {{^vendorExtensions.x-go-skip-pointer}}{{^required}}*{{/required}}{{/vendorExtensions.x-go-skip-pointer}}{{dataType}}{{/isPrimitiveType}}{{^isPrimitiveType}}    {{vendorExtensions.x-exportParamName}} interface{{/isPrimitiveType}}
    {{/required}}{{/allParams}}
    }

    func (o *{{{classname}}}{{{nickname}}}Opts) ToQueryParams() map[string]any {
        data := make(map[string]any)

        if o == nil {
            return data
        }

        {{#allParams}}{{^required}}
            {{#isPrimitiveType}} data["{{baseName}}"] = o.{{vendorExtensions.x-exportParamName}} {{/isPrimitiveType}}
        {{/required}}{{/allParams}}

        return data
    }


{{/hasOptionalParams}}
{{/operation}}{{/operations}}
